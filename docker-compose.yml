version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: kalliky_postgres
    restart: always
    environment:
      POSTGRES_USER: kalliky_user
      POSTGRES_PASSWORD: kalliky_secure_pass_2024
      POSTGRES_DB: kalliky_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kalliky_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kalliky_user -d kalliky_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: kalliky_redis
    restart: always
    command: redis-server --requirepass kalliky_redis_pass_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kalliky_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kalliky_app
    restart: always
    environment:
      # Database
      DATABASE_URL: postgresql://kalliky_user:kalliky_secure_pass_2024@postgres:5432/kalliky_prod?schema=public
      SHADOW_DATABASE_URL: postgresql://kalliky_user:kalliky_secure_pass_2024@postgres:5432/kalliky_shadow?schema=public
      
      # Redis
      REDIS_URL: redis://:kalliky_redis_pass_2024@redis:6379
      
      # Application
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET}
      
      # Services externes (à configurer)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      TELNYX_API_KEY: ${TELNYX_API_KEY}
      TELNYX_WEBHOOK_SECRET: ${TELNYX_WEBHOOK_SECRET}
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - kalliky_network
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm start
      "

  # Nginx (optionnel - pour reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: kalliky_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - kalliky_network

networks:
  kalliky_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: