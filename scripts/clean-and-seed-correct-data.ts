import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanAndSeedCorrectData() {
  console.log('üßπ D√©but du nettoyage et cr√©ation des bonnes donn√©es...');

  try {
    // 1. Trouver l'utilisateur
    const user = await prisma.user.findUnique({
      where: { email: 'medkamel.dhakwani@gmail.com' }
    });

    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©');
      return;
    }

    console.log(`‚úÖ Utilisateur trouv√©: ${user.email}`);

    // 2. Trouver le business
    const business = await prisma.business.findFirst({
      where: { ownerId: user.id }
    });

    if (!business) {
      console.log('‚ùå Business non trouv√©');
      return;
    }

    // 3. Trouver la bonne boutique "Les Coutumes"
    const correctStore = await prisma.store.findUnique({
      where: { id: '0e842ebb-c059-4a31-8e19-a7bbaad7cd0b' }
    });

    if (!correctStore) {
      console.log('‚ùå Store "Les Coutumes" non trouv√©');
      return;
    }

    console.log(`‚úÖ Bonne boutique trouv√©e: ${correctStore.name} √† ${correctStore.address}`);

    // 4. Nettoyer les donn√©es de test pr√©c√©dentes
    console.log('üßπ Nettoyage des anciennes donn√©es...');
    
    // Supprimer les donn√©es li√©es aux mauvaises boutiques
    const wrongStores = await prisma.store.findMany({
      where: {
        businessId: business.id,
        id: { not: correctStore.id },
        name: { contains: 'Test' }
      }
    });

    for (const wrongStore of wrongStores) {
      console.log(`üóëÔ∏è  Suppression du store incorrect: ${wrongStore.name}`);
      
      // Supprimer les donn√©es li√©es √† ce store
      await prisma.preparationTicket.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.activityLog.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.customerExchange.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.order.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.product.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.component.deleteMany({ where: { storeId: wrongStore.id } });
      await prisma.componentCategory.deleteMany({ where: { storeId: wrongStore.id } });
      
      // Supprimer le store
      await prisma.store.delete({ where: { id: wrongStore.id } });
    }

    // Nettoyer les anciennes donn√©es de test du bon store
    await prisma.preparationTicket.deleteMany({ where: { storeId: correctStore.id } });
    await prisma.activityLog.deleteMany({ where: { storeId: correctStore.id } });
    await prisma.customerExchange.deleteMany({ where: { storeId: correctStore.id } });
    await prisma.order.deleteMany({ where: { storeId: correctStore.id } });
    
    // Supprimer les clients de test
    await prisma.customer.deleteMany({ 
      where: { 
        businessId: business.id,
        OR: [
          { firstName: 'Sophie' },
          { firstName: 'Pierre' },
          { firstName: 'Marie' },
          { firstName: 'Jean' }
        ]
      } 
    });

    console.log('‚úÖ Nettoyage termin√©');

    // 5. Cr√©er les produits avec allerg√®nes et tags
    console.log('üçΩÔ∏è Cr√©ation des produits avec allerg√®nes...');

    // V√©rifier quels produits existent d√©j√†
    const existingProducts = await prisma.product.findMany({
      where: { storeId: correctStore.id }
    });

    console.log(`üìã ${existingProducts.length} produits existants trouv√©s`);

    // Ajouter des desserts et boissons si ils n'existent pas
    const additionalProducts = [
      // Desserts
      {
        name: 'Tiramisu Maison',
        description: 'Tiramisu traditionnel aux biscuits √† la cuill√®re',
        category: 'Desserts',
        aiKeywords: ['dessert', 'italien', 'caf√©', 'mascarpone'],
        allergens: ['≈ìufs', 'lactose', 'gluten'],
        price: 6.90
      },
      {
        name: 'Moelleux au Chocolat',
        description: 'Moelleux chaud au chocolat noir, c≈ìur coulant',
        category: 'Desserts', 
        aiKeywords: ['chocolat', 'chaud', 'dessert', 'coulant'],
        allergens: ['gluten', '≈ìufs', 'lactose'],
        price: 7.50
      },
      {
        name: 'Panna Cotta Fruits Rouges',
        description: 'Panna cotta vanille et coulis de fruits rouges',
        category: 'Desserts',
        aiKeywords: ['l√©ger', 'fruit√©', 'vanille', 'italien'],
        allergens: ['lactose'],
        price: 5.90
      },
      {
        name: 'Fondant au Caramel',
        description: 'Fondant caramel beurre sal√© et glace vanille',
        category: 'Desserts',
        aiKeywords: ['caramel', 'beurre sal√©', 'chaud', 'glace'],
        allergens: ['gluten', '≈ìufs', 'lactose'],
        price: 7.90
      },
      // Boissons
      {
        name: 'Coca-Cola',
        description: 'Coca-Cola 33cl',
        category: 'Boissons',
        aiKeywords: ['soda', 'rafra√Æchissant', 'cola'],
        allergens: [],
        price: 3.50
      },
      {
        name: 'Sprite',
        description: 'Sprite citron 33cl',
        category: 'Boissons',
        aiKeywords: ['soda', 'citron', 'rafra√Æchissant'],
        allergens: [],
        price: 3.50
      },
      {
        name: 'Jus d\'Orange Press√©',
        description: 'Jus d\'orange fra√Æchement press√©',
        category: 'Boissons',
        aiKeywords: ['jus', 'orange', 'frais', 'vitamine'],
        allergens: [],
        price: 4.50
      },
      {
        name: 'Eau Min√©rale',
        description: 'Eau min√©rale plate ou p√©tillante 50cl',
        category: 'Boissons',
        aiKeywords: ['eau', 'min√©rale', 'hydratation'],
        allergens: [],
        price: 2.50
      },
      {
        name: 'Caf√© Espresso',
        description: 'Caf√© espresso italien',
        category: 'Boissons',
        aiKeywords: ['caf√©', 'espresso', 'chaud', 'italien'],
        allergens: [],
        price: 2.90
      },
      {
        name: 'Th√© Vert',
        description: 'Th√© vert bio en infusion',
        category: 'Boissons',
        aiKeywords: ['th√©', 'vert', 'bio', 'chaud'],
        allergens: [],
        price: 2.90
      }
    ];

    const newProducts = [];
    for (const productData of additionalProducts) {
      const exists = existingProducts.find(p => p.name.toLowerCase().includes(productData.name.toLowerCase()));
      if (!exists) {
        const product = await prisma.product.create({
          data: {
            storeId: correctStore.id,
            name: productData.name,
            description: productData.description,
            category: productData.category,
            status: 'ACTIVE',
            aiKeywords: productData.aiKeywords,
            stock: 100,
            popularity: Math.floor(Math.random() * 10) + 1
          }
        });

        // Ajouter les tags allerg√®nes
        for (const allergen of productData.allergens) {
          await prisma.productTagRelation.create({
            data: {
              productId: product.id,
              tag: `allerg√®ne:${allergen}`
            }
          });
        }

        // Ajouter d'autres tags
        for (const keyword of productData.aiKeywords) {
          await prisma.productTagRelation.create({
            data: {
              productId: product.id,
              tag: keyword
            }
          });
        }

        newProducts.push(product);
      }
    }

    console.log(`‚úÖ ${newProducts.length} nouveaux produits cr√©√©s avec allerg√®nes`);

    // 6. R√©cup√©rer tous les produits pour les commandes
    const allProducts = await prisma.product.findMany({
      where: { storeId: correctStore.id },
      include: { tags: true }
    });

    console.log(`üì¶ ${allProducts.length} produits total disponibles`);

    // 7. Cr√©er des clients r√©alistes
    console.log('üë• Cr√©ation des clients...');

    const customers = await Promise.all([
      prisma.customer.create({
        data: {
          phone: '0612345678',
          firstName: 'Marie',
          lastName: 'Dubois',
          email: 'marie.dubois@email.com',
          status: 'VIP',
          businessId: business.id,
          totalSpent: 285.40,
          orderCount: 15,
          lastSeen: new Date()
        }
      }),
      prisma.customer.create({
        data: {
          phone: '0687654321',
          firstName: 'Pierre',
          lastName: 'Lefebvre',
          email: 'pierre.lefebvre@email.com',
          status: 'REGULAR',
          businessId: business.id,
          totalSpent: 156.80,
          orderCount: 8,
          lastSeen: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }),
      prisma.customer.create({
        data: {
          phone: '0123456789',
          firstName: 'Sophie',
          lastName: 'Martin',
          email: 'sophie.martin@email.com',
          status: 'NEW',
          businessId: business.id,
          totalSpent: 34.80,
          orderCount: 2,
          lastSeen: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
        }
      }),
      prisma.customer.create({
        data: {
          phone: '0698765432',
          firstName: 'Jean',
          lastName: 'Rousseau',
          email: 'jean.rousseau@entreprise.com',
          status: 'REGULAR',
          businessId: business.id,
          totalSpent: 198.60,
          orderCount: 6,
          lastSeen: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
        }
      }),
      prisma.customer.create({
        data: {
          phone: '0756789012',
          firstName: 'Camille',
          lastName: 'Durand',
          email: 'camille.durand@etudiant.fr',
          status: 'NEW',
          businessId: business.id,
          totalSpent: 45.30,
          orderCount: 3,
          lastSeen: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
        }
      })
    ]);

    console.log(`‚úÖ ${customers.length} clients cr√©√©s`);

    // 8. Cr√©er des commandes vari√©es avec vrais produits
    console.log('üìã Cr√©ation des commandes avec vrais produits...');

    const orders = [];

    // Fonction helper pour cr√©er une commande
    const createOrder = async (customer, items, daysBefore = 0) => {
      const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      const tax = subtotal * 0.1;
      const total = subtotal + tax;

      return await prisma.order.create({
        data: {
          orderNumber: `CMD${Date.now() + Math.random() * 1000}`,
          customerId: customer.id,
          storeId: correctStore.id,
          businessId: business.id,
          items: JSON.stringify(items),
          subtotal,
          tax,
          taxRate: 10,
          total,
          status: daysBefore === 0 ? 'PENDING' : 'DELIVERED',
          paymentStatus: 'PAID',
          paymentMethod: Math.random() > 0.5 ? 'Carte bancaire' : 'Esp√®ces',
          createdAt: new Date(Date.now() - daysBefore * 24 * 60 * 60 * 1000)
        }
      });
    };

    // Commandes pour Marie (VIP) - commandes compl√®tes
    orders.push(await createOrder(customers[0], [
      { name: 'Plateau Sushi Mix', quantity: 1, price: 18.90 },
      { name: 'Tiramisu Maison', quantity: 1, price: 6.90 },
      { name: 'Th√© Vert', quantity: 1, price: 2.90 }
    ], 0));

    orders.push(await createOrder(customers[0], [
      { name: 'Burger Gourmet', quantity: 2, price: 12.90 },
      { name: 'Moelleux au Chocolat', quantity: 2, price: 7.50 },
      { name: 'Coca-Cola', quantity: 2, price: 3.50 }
    ], 2));

    // Commandes pour Pierre (professionnel) - commandes group√©es
    orders.push(await createOrder(customers[1], [
      { name: 'Pizza Margherita', quantity: 4, price: 9.90 },
      { name: 'Salade C√©sar', quantity: 2, price: 8.90 },
      { name: 'Coca-Cola', quantity: 4, price: 3.50 },
      { name: 'Caf√© Espresso', quantity: 4, price: 2.90 }
    ], 1));

    // Commandes pour Sophie (nouvelle) - d√©couverte
    orders.push(await createOrder(customers[2], [
      { name: 'Pok√© Bowl', quantity: 1, price: 13.90 },
      { name: 'Jus d\'Orange Press√©', quantity: 1, price: 4.50 }
    ], 3));

    // Commandes pour Jean (bureau)
    orders.push(await createOrder(customers[3], [
      { name: 'Wrap Mexicain', quantity: 1, price: 10.90 },
      { name: 'Panna Cotta Fruits Rouges', quantity: 1, price: 5.90 },
      { name: 'Caf√© Espresso', quantity: 1, price: 2.90 }
    ], 1));

    // Commandes pour Camille (√©tudiante) - petit budget
    orders.push(await createOrder(customers[4], [
      { name: 'Tacos Trio', quantity: 1, price: 12.90 },
      { name: 'Eau Min√©rale', quantity: 1, price: 2.50 }
    ], 4));

    console.log(`‚úÖ ${orders.length} commandes cr√©√©es avec vrais produits`);

    // 9. Cr√©er des √©changes d√©taill√©s avec redirections
    console.log('üí¨ Cr√©ation des √©changes clients avec redirections...');

    const exchanges = await Promise.all([
      // Demande allerg√®nes
      prisma.customerExchange.create({
        data: {
          customerId: customers[0].id,
          storeId: correctStore.id,
          type: 'CALL',
          description: 'Demande d\'informations sur les allerg√®nes',
          content: JSON.stringify({
            transcript: "Bonjour, ma fille est allergique aux ≈ìufs. Quels desserts pourriez-vous nous proposer ? Elle adore le chocolat mais il faut que ce soit sans ≈ìufs.",
            response: "Parfait ! Je vous recommande notre Panna Cotta aux fruits rouges qui ne contient pas d'≈ìufs, seulement du lactose. Et bonne nouvelle, nous avons aussi des options chocolat sans ≈ìufs en pr√©paration !",
            duration: "3:45",
            allergiesDiscussed: ["≈ìufs", "lactose"],
            recommendations: ["Panna Cotta Fruits Rouges"]
          }),
          metadata: JSON.stringify({ 
            resolved: true, 
            allergyInfo: true,
            customerSatisfaction: "tr√®s satisfait"
          }),
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000)
        }
      }),

      // Grosse commande -> redirection manager
      prisma.customerExchange.create({
        data: {
          customerId: customers[1].id,
          storeId: correctStore.id,
          type: 'CALL',
          description: 'Grosse commande entreprise - redirection vers manager',
          content: JSON.stringify({
            transcript: "Bonjour, je suis Pierre Lefebvre de l'entreprise TechCorp. Nous organisons un s√©minaire demain et nous aurions besoin de commander pour 50 personnes. Nous aurions besoin de plateaux-repas avec des options v√©g√©tariennes. Pouvez-vous nous aider ?",
            initialResponse: "Bonjour M. Lefebvre, c'est une belle commande ! Pour une commande de cette ampleur, je vais vous mettre en relation avec notre responsable commercial qui pourra vous proposer des tarifs pr√©f√©rentiels et s'assurer que tout soit parfait pour demain.",
            redirectionNote: "Transfert vers Sarah, responsable commercial - commandes entreprises",
            finalOutcome: "Devis personnalis√© envoy√© avec 15% de remise entreprise"
          }),
          metadata: JSON.stringify({ 
            redirected: true,
            redirectionType: "manager",
            redirectionReason: "Grosse commande - 50 personnes",
            handledBy: "Sarah Dupont - Commercial",
            orderValue: 750.00,
            discountApplied: 15
          }),
          createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      }),

      // Demande de r√©servation -> redirection service r√©servation
      prisma.customerExchange.create({
        data: {
          customerId: customers[2].id,
          storeId: correctStore.id,
          type: 'CALL',
          description: 'Demande de r√©servation - redirection service r√©servation',
          content: JSON.stringify({
            transcript: "Bonsoir, je voudrais r√©server une table pour 8 personnes samedi soir vers 20h. C'est pour un anniversaire, est-ce que vous faites quelque chose de sp√©cial ?",
            response: "Bonsoir Sophie ! C'est avec plaisir que nous vous accueillerons pour cet anniversaire. Pour les r√©servations et l'organisation d'√©v√©nements sp√©ciaux, je vais vous transf√©rer vers notre service r√©servation qui pourra s'occuper de tous les d√©tails.",
            transferNote: "Transfert vers service r√©servation - Marc Lenoir",
            reservationOutcome: "Table r√©serv√©e + g√¢teau d'anniversaire offert + d√©coration de table"
          }),
          metadata: JSON.stringify({ 
            redirected: true,
            redirectionType: "reservation",
            redirectionReason: "R√©servation 8 personnes + √©v√©nement anniversaire",
            handledBy: "Marc Lenoir - Service R√©servation",
            eventType: "anniversaire",
            partySize: 8,
            specialRequests: ["g√¢teau", "d√©coration"]
          }),
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
        }
      }),

      // Vente additionnelle r√©ussie
      prisma.customerExchange.create({
        data: {
          customerId: customers[3].id,
          storeId: correctStore.id,
          type: 'CALL',
          description: 'Vente additionnelle dessert r√©ussie',
          content: JSON.stringify({
            transcript: "Je vais prendre un Wrap Mexicain s'il vous pla√Æt.",
            upsellAttempt: "Parfait ! Et pour terminer en beaut√©, puis-je vous proposer notre sp√©cialit√© ? Notre Moelleux au Chocolat est vraiment exceptionnel, servi chaud avec une boule de glace vanille.",
            customerResponse: "Ah √ßa me tente bien ! C'est fait maison ?",
            confirmationSale: "Absolument, tout est fait maison dans notre cuisine. Je vous ajoute le moelleux alors ?",
            finalResponse: "Oui parfait, et un caf√© aussi s'il vous pla√Æt."
          }),
          metadata: JSON.stringify({ 
            upsellSuccess: true,
            additionalItems: ["Moelleux au Chocolat", "Caf√© Espresso"],
            additionalRevenue: 10.40,
            customerSatisfaction: "excellent"
          }),
          createdAt: new Date(Date.now() - 36 * 60 * 60 * 1000)
        }
      }),

      // √âv√©nement sp√©cial -> redirection service √©v√©nementiel
      prisma.customerExchange.create({
        data: {
          customerId: customers[4].id,
          storeId: correctStore.id,
          type: 'EMAIL',
          description: 'Organisation anniversaire - redirection service √©v√©nementiel',
          content: JSON.stringify({
            emailSubject: "Organisation anniversaire 30 ans",
            emailContent: "Bonjour, nous organisons les 30 ans de mon copain et nous cherchons un restaurant qui pourrait nous accueillir pour une vingtaine de personnes. Avez-vous des menus de groupe ? Nous aimerions quelque chose de festif avec peut-√™tre de la musique. Merci !",
            responsePreview: "Bonjour Camille, merci pour votre message ! Nous serions ravis de vous accueillir pour cet √©v√©nement sp√©cial. Je transf√®re votre demande √† notre service √©v√©nementiel qui vous contactera dans la journ√©e avec des propositions sur mesure.",
            eventCoordinatorNote: "Transfert vers Julie Martin - Coordinatrice √©v√©nements"
          }),
          metadata: JSON.stringify({ 
            redirected: true,
            redirectionType: "events",
            redirectionReason: "Anniversaire 30 ans - 20 personnes",
            handledBy: "Julie Martin - Coordinatrice √âv√©nements",
            eventType: "anniversaire",
            partySize: 20,
            specialRequests: ["menu groupe", "ambiance festive", "musique"]
          }),
          createdAt: new Date(Date.now() - 48 * 60 * 60 * 1000)
        }
      }),

      // Question produit simple
      prisma.customerExchange.create({
        data: {
          customerId: customers[0].id,
          storeId: correctStore.id,
          type: 'CALL',
          description: 'Question sur composition Pok√© Bowl',
          content: JSON.stringify({
            transcript: "Bonjour, je voudrais savoir ce qu'il y a exactement dans votre Pok√© Bowl ? Mon mari est allergique au s√©same.",
            response: "Bonjour Marie ! Notre Pok√© Bowl contient du riz, saumon frais, avocat, concombre, radis, edamame et effectivement des graines de s√©same avec une sauce soja-s√©same. Pour votre mari, je peux vous proposer de le pr√©parer sans s√©same et avec une sauce alternative ?",
            customerDecision: "Oh parfait ! Oui faites-le sans s√©same alors, et vous mettez quoi comme sauce √† la place ?",
            finalResponse: "Nous avons une d√©licieuse sauce ponzu aux agrumes ou une sauce teriyaki, les deux sont sans s√©same. Que pr√©f√©rez-vous ?"
          }),
          metadata: JSON.stringify({ 
            resolved: true,
            productCustomization: true,
            allergyAccommodation: "s√©same",
            alternativeOffered: true
          }),
          createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000)
        }
      })
    ]);

    console.log(`‚úÖ ${exchanges.length} √©changes cr√©√©s avec redirections`);

    // 10. Cr√©er des logs d'activit√©
    const activityLogs = await Promise.all([
      prisma.activityLog.create({
        data: {
          storeId: correctStore.id,
          customerId: customers[0].id,
          type: 'ORDER',
          entityId: orders[0].orderNumber,
          title: `Commande ${orders[0].orderNumber}`,
          description: 'Commande VIP avec questions allerg√®nes',
          amount: orders[0].total,
          metadata: JSON.stringify({ 
            paymentMethod: 'Carte bancaire', 
            items: 3,
            customerType: 'VIP',
            specialNotes: 'Client sensible aux allerg√®nes'
          })
        }
      }),
      prisma.activityLog.create({
        data: {
          storeId: correctStore.id,
          customerId: customers[1].id,
          type: 'CALL',
          entityId: 'CALL-ENTERPRISE-001',
          title: 'Appel commande entreprise',
          description: 'Grosse commande 50 personnes - transfert manager',
          metadata: JSON.stringify({ 
            duration: '8:30', 
            type: 'enterprise',
            redirected: true,
            potentialValue: 750.00
          }),
          createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000)
        }
      })
    ]);

    console.log(`‚úÖ ${activityLogs.length} logs d'activit√© cr√©√©s`);

    console.log('üéâ Seeding complet termin√© !');
    console.log(`üìä R√©sum√© pour la boutique "${correctStore.name}":`);
    console.log(`   - ${customers.length} clients avec profils vari√©s`);
    console.log(`   - ${orders.length} commandes avec vrais produits`);
    console.log(`   - ${exchanges.length} √©changes d√©taill√©s avec redirections`);
    console.log(`   - ${activityLogs.length} logs d'activit√©`);
    console.log(`   - ${allProducts.length} produits total avec allerg√®nes`);

  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage/seeding:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanAndSeedCorrectData();